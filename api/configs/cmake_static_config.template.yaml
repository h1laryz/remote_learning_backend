components_manager:
    task_processors:                  # Task processor is an executor for coroutine tasks

        main-task-processor:          # Make a task processor for CPU-bound couroutine tasks.
            worker_threads: $ENV{REMOTE_LEARNING_BACKEND_WORKER_THREADS}         # Process tasks in 4 threads.

        fs-task-processor:            # Make a separate task processor for filesystem bound tasks.
            worker_threads: $ENV{REMOTE_LEARNING_BACKEND_WORKER_FS_THREADS}

    default_task_processor: main-task-processor

    components:                       # Configuring components that were registered via component_list
        server:
            listener:                 # configuring the main listening socket...
                port: $ENV{REMOTE_LEARNING_BACKEND_SERVER_PORT}            # ...to listen on this port and...
                task_processor: main-task-processor    # ...process incoming requests on this task processor.
        logging:
            fs-task-processor: fs-task-processor
            loggers:
                default:
                    file_path: '@stdout'
                    level: $ENV{REMOTE_LEARNING_BACKEND_LOGGER_LEVEL}
                    overflow_behavior: discard  # Drop logs if the system is too busy to write them down.

        # Dynamic config options. Cache is disabled, updates are disabled.
        dynamic-config:
            # For most of userver dynamic configs, defaults are used, some are overridden here.
            # See userver "dynamic config" docs for what configs exist.
            defaults:
                HTTP_CLIENT_CONNECTION_POOL_SIZE: 1000
                POSTGRES_DEFAULT_COMMAND_CONTROL:
                    network_timeout_ms: 750
                    statement_timeout_ms: 500

        testsuite-support: {}

        http-client:
            load-enabled: $ENV{REMOTE_LEARNING_BACKEND_IS_TESTING}
            fs-task-processor: fs-task-processor

        tests-control:
            load-enabled: $ENV{REMOTE_LEARNING_BACKEND_IS_TESTING}
            path: /tests/{action}
            method: POST
            task_processor: main-task-processor
        handler-ping:
            path: /ping
            method: GET
            task_processor: main-task-processor
            throttling_enabled: false
            url_trailing_slash: strict-match

        handler-hello:                    # Finally! Our handler.
            path: /v1/hello               # Registering handler by URL '/v1/hello'.
            method: POST                  # It will only reply to POST requests.
            task_processor: main-task-processor  # Run it on CPU bound task processor

        postgres-db-1:
            dbconnection: postgresql://$ENV{REMOTE_LEARNING_BACKEND_DB_USER}:$ENV{REMOTE_LEARNING_BACKEND_DB_PASSWORD}@$ENV{REMOTE_LEARNING_BACKEND_POSTGRES_SERVICE_NAME}:$ENV{REMOTE_LEARNING_BACKEND_DB_PORT}/$ENV{REMOTE_LEARNING_BACKEND_DB_NAME}
            blocking_task_processor: fs-task-processor
            dns_resolver: async
            sync-start: false
            connlimit_mode: manual

        dns-client:
            fs-task-processor: fs-task-processor
